#include <iostream>
#include <fstream>
#include <stdlib.h>
#include <pcap.h>
#include <ctime> 
#include <stdint.h> 
#include "jparser.hpp"

using namespace std;

class Packet{

	public :
		
		Logger lg;           // declreration of Logger object.  
		int length;          // length of packet.
		time_t ptime;        // the time which packet was captured.
		string network_protocol;
		string transport_protocol;
		string application_protocol;
		string eth_dir;
		int src_ip[4];
		int dst_ip[4];

		Packet(u_char *data, const struct pcap_pkthdr* pkthdr, const u_char *packet, string eth_address, string transport_address){

			int byte = 0;
			int limit = pkthdr->len;
			const u_char *ptr = packet;
			char packet_content[5000];

			//assigning pointer value to an attribute of 
			//this object.
			while(byte++ < limit){
				packet_content[byte-1] = *ptr;
				ptr++;
			}
			
			packet_ptr = packet_content; 
			length = pkthdr->len;
			ptime = time(NULL);
			eth_dir = eth_address;
			set_eth_protocol(eth_address);

			if(network_protocol == "IPv4"){
				//if protocol is IPv4 we define transport layer protocol and ip address.
				set_transport_protocol(transport_address);
				set_ip_address();
			}

			//cout << "a packet captured!" << endl;
		}

		
		char show_byte(int byte){
			
			return (unsigned char) packet_ptr[byte];
		}



		/*
		 * this function will return
		 * the value stored in a
		 * sequence of bytes in packet.
		 * show_bytes(5, 8);
		 * will return value of 5,6 and 7th bytes of 
		 * packet a string.
		 *
		 */

		string show_bytes(int begin, int end){
			
			int len = end - begin;
			char bytes[len];
			string strbytes = "";

			for(int i=begin; i<end; i++){
				char byte = (unsigned char) packet_ptr[i];
				sprintf(bytes,"%x", byte & 0xff);
				//cout << bytes;
				strbytes = strbytes + bytes;

			}

			//string strbytes = convertToString(bytes, len);
			return strbytes;
		}


		/*
		 * this function will find the
		 * transport protocol of the packet
		 */

		string transport_protocol_(string address){
		
			string transport_type;
			ifstream f;
			f.open(address);
			if(f){
				f >> transport_type;
				return transport_type;
			}else{
				return "-1";
			}
		}

		/*
		 * this function get the address of file 
		 * and find the corresponded file with the
		 * address.
		 * the data in file is the protocl of the packet.
		 * It will return the data.
		 *
		 */

		string eth_protocol(string address){

			string eth_type;
			ifstream f;
			f.open(address);
			if(f){
				f >> eth_type;
				return eth_type;
			}else{
				return "-1";
			}

		}

		string show_src_ip(bool color = false){
			
			string ip = to_string(src_ip[0]) + "." + to_string(src_ip[1]) + "." + to_string(src_ip[2]) + "." + to_string(src_ip[3]);
			if(color)
				ip = "\033[032;7m" + ip + "\033[0m";

			return ip;
		}

		string show_dst_ip(bool color = false){
			
			string ip = to_string(dst_ip[0]) + "." + to_string(dst_ip[1]) + "." + to_string(dst_ip[2]) + "." + to_string(dst_ip[3]);
			if(color)
				ip = "\033[032;7m" + ip + "\033[0m";

			return ip;
		}

	private:

		char *packet_ptr;

		/*
		 *
		 * this function 
		 * assign output of the
		 * "eth_protocol" to the
		 * "network_protocol" attribute
		 *
		 */

		void set_eth_protocol(string address){
			
			address = address + show_bytes(12,14);
			network_protocol = eth_protocol(address);

		}

		void set_transport_protocol(string address){
			
			address = address + show_bytes(23,24);
			transport_protocol = transport_protocol_(address);
		}

		/*
		 *
		 * this function get a serie of characters
		 * and  size, then return the string 
		 * type of them.
		 *
		 */
		string convertToString(char *a, int size){
			
			string s = "";
			for(int i=0; i< size; i++)
				s = s + a[i];
			return s;
		}

		void set_ip_address(){
			
			if( network_protocol != "IPv4")
				return ;

			for(int i=0; i<4; i++){
				string byte = show_bytes(i+26,i+27);
				src_ip[i] = stoi(byte,nullptr,16);

			}

			for(int i=0; i<4; i++){
				string byte = show_bytes(i+30,i+31);
				dst_ip[i] = stoi(byte,nullptr,16);

			}
		}
};



